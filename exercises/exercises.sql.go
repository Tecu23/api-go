// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: exercises.sql

package exercises

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createExercise = `-- name: CreateExercise :one
INSERT INTO exercises (
  name
) VALUES (
  $1
)
RETURNING id, name
`

func (q *Queries) CreateExercise(ctx context.Context, name string) (Exercise, error) {
	row := q.db.QueryRow(ctx, createExercise, name)
	var i Exercise
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteExercise = `-- name: DeleteExercise :exec
DELETE FROM exercises
WHERE id = $1
`

func (q *Queries) DeleteExercise(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteExercise, id)
	return err
}

const getExercise = `-- name: GetExercise :one
SELECT id, name FROM exercises
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExercise(ctx context.Context, id pgtype.UUID) (Exercise, error) {
	row := q.db.QueryRow(ctx, getExercise, id)
	var i Exercise
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listExercises = `-- name: ListExercises :many
SELECT id, name FROM exercises
ORDER BY name
`

func (q *Queries) ListExercises(ctx context.Context) ([]Exercise, error) {
	rows, err := q.db.Query(ctx, listExercises)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exercise
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExercise = `-- name: UpdateExercise :exec
UPDATE exercises
  set name = $2
WHERE id = $1
`

type UpdateExerciseParams struct {
	ID   pgtype.UUID
	Name string
}

func (q *Queries) UpdateExercise(ctx context.Context, arg UpdateExerciseParams) error {
	_, err := q.db.Exec(ctx, updateExercise, arg.ID, arg.Name)
	return err
}
